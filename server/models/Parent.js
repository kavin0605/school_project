const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// Parent Schema
const parentSchema = new mongoose.Schema({
  parentId: {
    type: String,
    unique: true
    // removed required: true since it's auto-generated by pre-save hook
  },
  personalInfo: {
    firstName: {
      type: String,
      required: [true, 'First name is required'],
      trim: true
    },
    lastName: {
      type: String,
      required: [true, 'Last name is required'],
      trim: true
    },
    email: {
      type: String,
      required: [true, 'Email is required'],
      unique: true,
      lowercase: true,
      trim: true
    },
    phone: {
      type: String,
      required: [true, 'Phone is required']
    },
    alternatePhone: String,
    address: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: {
        type: String,
        default: 'India'
      }
    }
  },
  relationship: {
    type: String,
    enum: ['father', 'mother', 'guardian'],
    required: true
  },
  occupation: {
    jobTitle: String,
    company: String,
    workAddress: String,
    workPhone: String,
    monthlyIncome: Number
  },
  children: [{
    studentId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Student',
      required: true
    },
    rollNumber: String,
    admissionNumber: String,
    studentName: String,
    class: String,
    relationship: String
  }],
  loginCredentials: {
    password: {
      type: String,
      required: [true, 'Password is required'],
      minlength: 6
    },
    lastLogin: Date,
    isActive: {
      type: Boolean,
      default: true
    }
  },
  emergencyContact: {
    name: String,
    phone: String,
    relationship: String
  },
  status: {
    type: String,
    enum: ['active', 'inactive'],
    default: 'active'
  }
}, {
  timestamps: true
});

// Hash password before saving
parentSchema.pre('save', async function(next) {
  if (!this.isModified('loginCredentials.password')) return next();
  
  this.loginCredentials.password = await bcrypt.hash(this.loginCredentials.password, 12);
  next();
});

// Generate parent ID
parentSchema.pre('save', async function(next) {
  if (!this.parentId) {
    const year = new Date().getFullYear();
    const count = await this.constructor.countDocuments();
    this.parentId = `PAR${year}${String(count + 1).padStart(4, '0')}`;
  }
  next();
});

// Compare password method
parentSchema.methods.comparePassword = async function(candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.loginCredentials.password);
};

module.exports = mongoose.model('Parent', parentSchema);